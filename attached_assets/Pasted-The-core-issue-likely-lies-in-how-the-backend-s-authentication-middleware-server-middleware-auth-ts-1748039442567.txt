The core issue likely lies in how the backend's authentication middleware (server/middleware/auth.ts) validates the JWT token it receives. Specifically, the Supabase client on the backend needs the correct permissions (i.e., SERVICE_ROLE_KEY) to validate an access token for any user.

Here's a breakdown of findings and recommendations:

Authentication Flow and Token Validation
Backend Supabase Client Configuration (Most Likely Cause of 401):

Issue: The supabase.auth.getUser(token) call in server/middleware/auth.ts is likely failing because the Supabase client instance it uses might not be initialized with the necessary SERVICE_ROLE_KEY. The server/config.ts shows supabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;. If SUPABASE_SERVICE_ROLE_KEY is not set or incorrect, and it falls back to SUPABASE_ANON_KEY, getUser(token) will not be able to validate tokens for other users effectively.
Recommendation:
Verify SUPABASE_SERVICE_ROLE_KEY: Ensure that the SUPABASE_SERVICE_ROLE_KEY environment variable in your backend (Replit Secrets) is correctly set to the service role key for your Supabase project.
Ensure config.supabaseKey Uses Service Role: Confirm that config.supabaseKey in server/config.ts is definitely resolving to the service role key when the supabase client is initialized in server/middleware/auth.ts and server/controllers/authController.ts. The ANON_KEY is not sufficient for backend token validation of arbitrary user tokens.
Frontend Token Handling (client/src/context/AuthContext.tsx):

The frontend correctly stores the data.token (which is the access_token from Supabase, provided by authController.ts) in localStorage after a successful custom login call to /api/v1/auth/login.
The queryClient.ts correctly retrieves this token and includes it in the Authorization: Bearer <token> header for API requests.
The onAuthStateChange listener also correctly handles storing session.access_token.
Consideration: While not the direct cause of the 401, to ensure the frontend Supabase client is fully aware of the session after the custom login, you could consider calling supabase.auth.setSession() in the AuthContext.tsx signIn method if you also return the refresh_token from your backend. However, the 401 points to a backend validation problem.
User Role Management for Authorization:

Issue: The authenticateJWT middleware in server/middleware/auth.ts attempts to get the user's role from data.user.app_metadata?.role. If this isn't set in Supabase Auth for the user, the req.user.role will be 'unknown'. This would then cause issues with role-specific routes like requireNegotiatorRole.
Recommendation: When a negotiator is registered in server/controllers/authController.ts (registerNegotiator function), after successfully creating the Supabase auth user and the local user record, update the Supabase user's app_metadata to include their role.
TypeScript

// In server/controllers/authController.ts, inside registerNegotiator:
// After await storage.createUser(...)
if (data.user) { // data is from supabase.auth.signUp
    try {
        await supabase.auth.admin.updateUserById(
            data.user.id,
            { app_metadata: { role: 'negotiator', user_name: name } } // Also store name if useful
        );
    } catch (adminUpdateError) {
        console.error('Failed to update Supabase user app_metadata:', adminUpdateError);
        // Consider if this should be a critical error or just logged
    }
}
This step is crucial for subsequent authorization checks, although it's not the primary cause of the initial 401 error if token validation itself is failing.
Alignment with Tracker MVP Documents
Schema: The database schema in shared/schema.ts for the transactions table correctly includes negotiator_id and welcome_email_body, aligning with the "ReAlign_Tracker MVP - Phased Implementation Plan.docx" and "ReAlign_Tracker MVP - Phased Implementation Plan II.docx".
Transaction Creation:
The backend transactionController.ts uses req.user.id as negotiator_id when creating transactions. This is correct according to the plans.
The storage.ts createTransaction method includes logic for welcome_email_body and for creating email_subscriptions with magic links and expiry dates, as required by Phase 1 of the Tracker MVP plan.
Authentication Distinction: The system attempts to use JWTs for negotiators and magic links for other parties, which is in line with the MVP's distinction. The current issue affects negotiator JWT authentication.
Other Points from User's Analysis & Provided Documents
SQL Syntax Errors & Drizzle ORM Issues: The document "ReAlign_Tracker MVP - Phased Implementation Plan II.docx" mentions these as critical foundational fixes. While the specific errors are not visible in the currently analyzed snippets, a thorough review of all Drizzle queries in server/storage.ts against PostgreSQL syntax and Drizzle documentation is necessary. The SSL connection fix (ssl: { rejectUnauthorized: false }) is correctly present in server/storage.ts.
"Double Authentication Layer" / "Session Management Conflict": The "Authentication Token Issue Analysis" rightly points out potential conflicts if the custom login flow and Supabase's client-side session management aren't perfectly synchronized. The primary fix (ensuring backend uses SERVICE_ROLE_KEY for getUser) should resolve the 401, as the token being sent is indeed the Supabase access token.
In summary, the most critical action is to verify and ensure your backend Supabase client (especially in server/middleware/auth.ts) is initialized and using the SUPABASE_SERVICE_ROLE_KEY for the correct project to validate JWTs. This will allow supabase.auth.getUser(token) to correctly identify the user from the token provided by the frontend.