ReAlign 2.1 - Master Guide for AI Agent
Version: 1.0 Date: May 27, 2025 Purpose: This document serves as the central guide for an AI Coding Agent to develop and/or extend the ReAlign platform to version 2.1. It outlines the primary sources of truth, key strategic principles, specific instructions for integrating domain expertise (especially from the UBA Guide), and how to handle the existing codebase in the context of new development.
1. Primary Objective: Build ReAlign 2.1
You are tasked with building ReAlign version 2.1, an AI-native and agent-native platform for loss mitigation. This involves:
* Establishing foundational AI capabilities (persistent memory, structured logging, data normalization, Context Recipe framework).
* Enhancing the Tracker, Maker, and Advisor modules with intelligent features.
* Ensuring the platform can serve both human users and AI agents.
* Embedding deep domain expertise, particularly for Uniform Borrower Assistance (UBA) form completion.
2. Core Documentation - Sources of Truth:
When developing ReAlign 2.1, the following documents are your primary sources of truth. In case of conflicting information between these core 2.1 documents, prioritize the document listed first within this section. For conflicts between these 2.1 documents and older documents (e.g., MVP or 2.0 specs), these 2.1 documents ALWAYS take precedence.
1. ReAlign Product Requirements Document (PRD) 2.1.2 (Updated with UBA Guide Insights) (uploaded:ReAlign PRD 2.1.2.docx): This is your absolute primary source for overall vision, target users (human and AI), and detailed feature requirements for ReAlign 2.1.
2. ReAlign 2.1 - Phased Implementation Plan (v1.3, Updated with UBA Guide Insights) (uploaded:ReAlign 2.1 - Phased Implementation Plan .docx): This document details the phased rollout, MVP scope for complex systems, key deliverables for each phase, the Context Recipe framework, premium AI integration strategy, and how the UBA Guide informs development. Follow the phase order and deliverables specified here.
3. ReAlign 2.1 - Enhanced Data Model 1.0 (Updated with UBA Guide Annotations) (uploaded:ReAlign 2.1 - Enhanced Data Model 1.0.docx): This is the definitive source for all database schema, field definitions, data types, option sets (enums), and relationships for ReAlign 2.1. It includes specific annotations linking fields to UBA Guide requirements.
4. "how to fill out borrower assistance form.docx" (UBA Guide) (referred to, content not directly provided but its influence is in PRD 2.1.2, Phased Plan 2.1, and Enhanced Data Model 2.1): This document's procedural rules and data entry conventions for the UBA form are CRITICAL. You must implement features, especially within the "Maker" module and AI assistance, to reflect the expertise in this guide. Specific UBA Guide rules are annotated in the PRD, Phased Plan, and Data Model.
5. ReAlign 2.0 - Unified Design & Structure Guide.docx (uploaded:ReAlign 2.0 - Unified Design & Structure Guide.docx): For UI consistency, responsiveness, component guidelines, color palette, and typography.
6. ReAlign 2.0 UI & Navigation - Implementation Guide.docx (uploaded:ReAlign 2.0 UI & Navigation - Implementation Guide.docx): For specific navigation patterns (collapsible sidebar, public header/footer) and styling implementation using Tailwind CSS and Shadcn/UI.
7. Design Brief - Gregory John inspo.docx (uploaded:vibecode1/realignmvp/ReAlignMvp-3461fffd120e80d69fb2e07acb6931c699dfd323/attached_assets/Design Brief - Gregory John inspo.docx): For overarching brand personality, color usage rationale, typography specifics, and iconography/imagery guidelines.
8. ReAlign 2.1 - Developer Kickoff Checklist & Setup Guide.docx (uploaded:ReAlign 2.1 - Developer Kickoff Checklist & Setup Guide.docx): Use for environment setup guidance and understanding prerequisites for each development phase.
3. Guiding Principles for AI-Native Evolution (from PRD 2.1.2 Section 2):
Agent Use Case: Conversational Intake AI Implement a persistent, chat-driven assistant that:
Maps dialogue to structured BFS/UBA form data
Prompts for and interprets uploaded documents
Provides human-readable previews of inferred data
Supports field-level verification and override
Logs all AI suggestions, document parsing results, and user confirmations for audit and training purposes The assistant should follow a defined Context Recipe per intake section (e.g., hardship, income, bankruptcy) and respect the document-level logic outlined in the UBA Guide. 
* Premium AI Experience While Small: Prioritize high-quality AI interactions using advanced models, even if initially more costly.
* Context is King - Context Recipe Framework: AI features MUST use defined "Context Recipes" specifying data inputs for prompts. This includes incorporating rules from the UBA Guide.
* Agent-Native Architecture: Design all systems to serve both human users and AI agents as first-class citizens. This includes agent discoverability, authentication, experience (AX), analytics, and collaboration.
* AI Agent Visibility & Discoverability: Optimize ReAlign for "agentic attention" through semantic metadata, machine-readable schemas, and generative retrieval optimization.
* Interaction Memory & Continuity: The platform must remember user/case context across sessions and modules for both human and AI agents.
* Structured Workflow Logging as a Strategic Asset: Log all significant actions (user, system, AI agent) with rich context to create a proprietary dataset for AI improvement.
* Proactive and Predictive Assistance: Move beyond static information to offer intelligent alerts and suggestions.
* Data Normalization for Scalable Automation: Implement a robust data normalization layer, especially for BFS/UBA data, to ensure consistency and enable AI pre-filling.
* Avoid Solving Problems That Won't Be Problems Soon: Do not over-engineer solutions for current AI model limitations that are likely to be resolved by future model improvements.
* User-Centric AI (Trust, Transparency, Control): Clearly mark AI-generated content. Allow users/agents to override AI suggestions. Provide clear escalation paths to human support. Implement feedback mechanisms.
* Agent-to-Agent Interaction Foundation: Establish groundwork for future agent-to-agent interactions.
4. Handling Existing Codebase (vibecode1/realignmvp/ReAlignMvp-3461fffd120e80d69fb2e07acb6931c699dfd323/)
* General Approach: The ReAlign 2.1 vision represents a significant evolution. While the existing MVP codebase provides a starting point and valuable context (especially from debugging logs), prioritize specifications in the ReAlign 2.1 documents.
* UI Components (client/src/components/ui/): These Shadcn/UI components SHOULD be reused and adapted as per the "ReAlign 2.0 - Unified Design & Structure Guide.docx" and "ReAlign 2.0 UI & Navigation - Implementation Guide.docx".
* Navigation (client/src/components/layout/):
   * The existing Sidebar.tsx and AppSidebarContent.tsx are to be replaced/refactored into the new CollapsibleSidebar.tsx as per the "ReAlign 2.0 UI & Navigation - Implementation Guide.docx" (Phase 2) and "ReAlign 2.0 Master Implementation Plan.docx" (Phase 0). The files in _archive can be used for reference but the new structure is paramount. The AuthenticatedAppHeader.tsx and PublicHeader.tsx / PublicFooter.tsx / PublicLayout.tsx are new structures to be built.
* Styling (tailwind.config.ts, client/src/index.css): These MUST be updated according to "ReAlign 2.0 UI & Navigation - Implementation Guide.docx" (Step 1.1, 1.2) and "ReAlign 2.0 - Unified Design & Structure Guide.docx" (Section 3).
* Backend Logic (Controllers, Services, Storage):
   * Refactor Heavily: Existing backend files (server/controllers/, server/services/, server/storage.ts) need to be significantly refactored or rewritten to align with:
      * The "ReAlign 2.1 - Enhanced Data Model 1.0.docx".
      * New API requirements for AI features and agent interactions (as they get defined).
      * The simplified Tracker MVP scope as a base for the Tracker module, then enhanced as per PRD 2.1.2.
   * The "ReAlign_Tracker MVP - Phased Implementation Plan II.docx" and various debugging logs (Pasted-* files) provide insights into past issues and required fixes for the MVP version which should be considered during refactoring for the Tracker module.
* Database Schema (shared/schema.ts): This MUST be updated to match the "ReAlign 2.1 - Enhanced Data Model 1.0.docx". Drizzle ORM migrations must be used.
* Authentication (server/middleware/auth.ts, server/controllers/authController.ts, client/src/context/AuthContext.tsx): The existing Supabase JWT-based authentication should be the foundation. Enhance it for new user roles (Homeowner, Agent) and AI Agent authentication as specified in PRD 2.1.2 and Phased Plan 2.1 (Task 0.1). The authentication_audit_report.md and related debugging files indicate prior issues were resolved for MVP; build upon this stable base.
5. UBA Guide Integration - Specific Instructions:
This is a critical component of ReAlign 2.1's intelligence.
* Data Model: The "ReAlign 2.1 - Enhanced Data Model 1.0.docx" already includes annotations from the UBA Guide (e.g., for Transaction.IsPrimaryResidence, Party.Email, Hardship.Duration ). These annotations define default values, specific data entry rules (like "Attorney Only" for email, "N/A" for certain phone numbers ), and conditions based on case type (short sale vs. retention). These rules must be implemented as validation logic and default behaviors in the BFS/UBA Form Maker.
* BFS/UBA Form Maker (Phase 1.1 of Phased Plan 2.1):

   * UI: The form structure must mirror UBA.pdf.
   * Logic: All UBA Guide rules mentioned in PRD 2.1.2 (Section 5.2.3) and annotated in the Enhanced Data Model MUST be implemented. This includes:
   * Intent selection (no "Undecided").
   * Property Type defaulting.
   * Owner Occupied status logic.
   * Phone number handling ("N/A" rules).
   * Email field guidance ("Attorney Only").
   * Co-borrower field handling.
   * Sale & Offer details (logic for short sales vs. retention).
   * Credit Counseling ("No" and "N/A").
   * HOA fees data entry.
   * Bankruptcy details entry.
   * Military Service defaulting.
   * Household Income reporting (Gross vs. Gross & Net).
   * Household Expenses (dual sections, matching totals, "Food/Utilities" summarization).
   * Household Assets (default values).
   * Lien Holder details logic.
   * Hardship section pre-filling/guidance.
   * Strict "N/A" usage for all otherwise blank fields is mandatory.
   * AI Field Help: Context Recipes for AI help on BFS/UBA fields MUST incorporate these UBA Guide rules. The AI should explain why a rule applies or why "N/A" is appropriate.
   * Context Recipes: When defining Context Recipes (Task 0.2, PRD 2.1 Section 3.6 ), explicitly detail how UBA Guide rules are passed to the AI. For example, a recipe for UBA income field help should include:
   * User's loan type.
   * Case type (short sale vs. retention).
   * The specific UBA Guide rule for reporting Gross or Gross & Net income.
   * Previously entered income details.
   * Data Normalization (Task 0.4, PRD 2.1 Section 3.5 ): The schema for FinancialEntry and related tables must store UBA data in a way that respects these rules (e.g., ability to store both gross and net income if applicable, clear labeling of "Other (Food/Utilities)" expenses).
6. Agent-Native Implementation:
   * Authentication & Authorization (PRD 2.1 Section 3.1.2): Implement a distinct authentication system for AI agents (e.g., API keys, OAuth). Define agent-specific roles and permissions.
   * APIs: Existing and new APIs should be designed with agent consumption in mind (clear schemas, versioning, robust error handling).
   * Discoverability (PRD 2.1 Section 3.7 ):

      * Semantic Metadata: Implement JSON-LD for all modules and key data entities as per PRD.
      * Machine-Readable Service Descriptions: Create maker.json, advisor.json, etc. (as hinted in PRD 2.1 ) to describe capabilities.
      * OpenAPI Specs: Generate and maintain OpenAPI (Swagger) specifications for all API endpoints.
      * Logging (PRD 2.1 Section 3.4 ): Log all AI agent API calls, actions taken, and data accessed.
7. Key Principles from "How to Build a Truly Useful AI Product" (as per PRD 2.1 and Phased Plan 2.1):
      * Premium AI Experience While Small: Use top-tier AI models for core features. Do not prematurely optimize for cost if it degrades the "Ferrari-level" user experience.
      * Context is King: AI features MUST be driven by rich, specific Context Recipes.
      * Avoid Temporary Workarounds for AI Limitations: Focus on robust data structures and UX rather than engineering around current AI model weaknesses that will likely improve.
      * Human-in-the-Loop (HITL): Implement clear escalation paths from AI to human experts. Use the AI Interaction Review Console for feedback and KB improvement.
      * Data Flywheel: Ensure all interactions (especially AI-assisted ones) contribute to the proprietary dataset for continuous improvement.
8. Development Workflow & Environment:
      * Follow the Phased Implementation Plan: Build features according to the phases outlined in "ReAlign 2.1 - Phased Implementation Plan .docx".
      * Use Replit Environment: Set up and manage environment variables (DB strings, API keys for Supabase and Premium AI services) using Replit Secrets.
      * Database Migrations: Use Drizzle ORM for schema definition and migrations.
      * Version Control: Commit work regularly with clear messages, referencing tasks from the implementation plan.
      * Testing:
      * Unit tests for backend logic.
      * Manual E2E testing for each feature.
      * Specific testing for AI features, validating Context Recipe effectiveness and UBA Guide rule adherence.
9. Visual Assets:
      * Logos:
      * realign-logo-icon.svg
      * realign-logo-full.svg
      * (From client/src/components/ui/logo.tsx and client/index.html, it seems /images/logo.png or @assets/realign logo.png / @assets/realign icon logo (64 x 64 px).png are also used. Clarify and use consistently as per "ReAlign 2.0 UI & Navigation - Implementation Guide.docx" ).
      * Icons: Use lucide-react as specified in design documents.
10. Key Success Metrics to Keep in Mind (from PRD 2.1.2, Section 11 ):
      * AI Feature Effectiveness: User satisfaction with UBA assistance (>80%), Context Recipe effectiveness (>75% approval).
      * Maker Suite Utility: Number of UBA forms completed with AI, pre-fill accuracy/acceptance.
      * Advisor Suite Engagement: Chatbot performance on UBA queries.
By adhering to this Master Guide, the AI coding agent will be well-equipped to navigate the ReAlign 2.1 project, prioritize correctly, and build a robust, intelligent, and agent-native platform. Regular review of outputs against this guide and the source documents will be essential.