import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { serveStatic, log } from "./vite";
import { createProxyMiddleware } from 'http-proxy-middleware';
import { spawn } from 'child_process';
import path from 'path';

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Logging middleware
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "â€¦";
      }
      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  // Error handling
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });

  // In development, run Vite separately without HMR
  if (app.get("env") === "development") {
    console.log("Starting Vite development server without HMR...");
    
    // Start Vite in a separate process with HMR disabled
    const viteProcess = spawn('npx', ['vite', '--port', '5173', '--host', '--no-hmr'], {
      stdio: 'pipe',
      cwd: process.cwd()
    });

    viteProcess.stdout?.on('data', (data) => {
      console.log(`[vite] ${data.toString().trim()}`);
    });

    viteProcess.stderr?.on('data', (data) => {
      console.error(`[vite] ${data.toString().trim()}`);
    });

    // Wait a bit for Vite to start
    await new Promise(resolve => setTimeout(resolve, 3000));

    // Proxy non-API requests to Vite
    app.use(
      createProxyMiddleware({
        target: 'http://localhost:5173',
        changeOrigin: true,
        ws: false, // Disable WebSocket proxy
        logLevel: 'silent',
        filter: (pathname) => !pathname.startsWith('/api'),
        onError: (err, req, res) => {
          console.error('Proxy error:', err.message);
          // Serve a basic HTML page if Vite is not available
          res.writeHead(200, { 'Content-Type': 'text/html' });
          res.end(`
            <!DOCTYPE html>
            <html>
              <head>
                <title>ReAlign</title>
                <style>
                  body { font-family: sans-serif; padding: 20px; text-align: center; }
                  .error { color: #d32f2f; }
                </style>
              </head>
              <body>
                <h1>ReAlign</h1>
                <p class="error">Frontend development server is starting up...</p>
                <p>Please refresh the page in a few seconds.</p>
              </body>
            </html>
          `);
        },
      })
    );
  } else {
    serveStatic(app);
  }

  const port = 5000;
  server.listen(port, "0.0.0.0", () => {
    log(`Server running on port ${port} (without WebSocket HMR)`);
  });
})();