Okay, the test showed the following:
- Registration API call (/api/v1/auth/register-negotiator) was successful (201 Created).
- Server logs confirm "User successfully saved to database: rkilburn11@gmail.com".
- Client console logs in `RegisterNegotiator.tsx` show all steps completed, including "Supabase session explicitly set" and "Registration successful, redirecting to dashboard" before `window.location.href = '/dashboard'`.
- The browser console shows "Navigated to http://localhost:5173/dashboard".
- However, the screen blinked, and I remained on the registration page.
- The network tab for the `/dashboard` load does not show an immediate call to `/api/v1/auth/me`.

This suggests that after the hard reload to `/dashboard`, `AuthContext.tsx` might not be recognizing the authenticated session quickly enough, or `supabase.auth.getSession()` isn't finding the session from the previous page context, leading to `isAuthenticated` being false and `App.tsx`'s protected route logic redirecting back.

Please investigate and implement changes to address this:

1.  **`AuthContext.tsx` Robustness:**
    * In `AuthContext.tsx`'s `useEffect` that calls `checkSession`, add more detailed logging:
        * Log the result of `await supabase.auth.getSession()`. Does it find a session immediately after the hard redirect to `/dashboard`?
        * Log before and after the `/api/v1/auth/me` call.
        * Log the `event` and `session` in the `supabase.auth.onAuthStateChange` listener.
    * Consider if there's a way to make the `AuthContext` initialize its state more synchronously or signal a "checking authentication" state to `App.tsx` so protected routes can wait.

2.  **`App.tsx` (Router and Protected Routes):**
    * Review how protected routes are handled in `App.tsx`.
    * If `AuthContext.isLoading` is true, the protected routes should probably render a loading spinner or null, rather than immediately redirecting if `isAuthenticated` is momentarily false during the initial check. This will prevent the "blink" and premature redirect.

3.  **Alternative Redirect Strategy (If `window.location.href` is still problematic):**
    * While `window.location.href` forces a refresh, perhaps we can try to more directly signal the `AuthContext` to re-check authentication *after* the `supabase.auth.setSession()` call in `RegisterNegotiator.tsx` and then use `wouter`'s `setLocation`. For example, could `AuthContext` expose a function like `refreshAuthStatus()` that `RegisterNegotiator.tsx` could call? (This is a more advanced change, focus on 1 and 2 first).

The primary goal is to ensure that after the hard redirect to `/dashboard`, `AuthContext` correctly identifies the authenticated state from the newly set Supabase session and allows access to the dashboard without an immediate redirect back.