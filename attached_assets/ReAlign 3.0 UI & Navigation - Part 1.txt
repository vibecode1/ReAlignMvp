ReAlign 3.0 UI & Navigation - Part 1 


Date: June 2, 2025 Status: Major Revision - Full AI Orchestration Architecture
Changes in Version 3.0
* Complete paradigm shift to conversational AI as primary interface
* Persistent memory system visualization components
* Emotional intelligence UI patterns throughout
* Real-time learning feedback mechanisms
* AI-first navigation with context awareness
* End-to-end automation progress tracking
* Advanced document intelligence interfaces
* Servicer negotiation dashboards
* AI agent development interfaces
Overall Goal Implement ReAlign 3.0's AI-driven interface that orchestrates the entire loss mitigation journey through intelligent conversation, emotional awareness, and continuous learning, while maintaining complete case context across all interactions.
Phase 1: Core Architecture & Emotional Design System Step 1.1: Enhanced Tailwind Configuration with Emotional States File: tailwind.config.ts
// tailwind.config.ts
import type { Config } from 'tailwindcss';


const config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        // Core Brand Colors
        'deep-ocean': '#0F172A',
        'calm-sky': '#3B82F6',
        'ocean-depth': '#1E3A8A',
        
        // Hope & Progress Colors
        'sage-green': '#10B981',
        'mint-fresh': '#6EE7B7',
        'forest-deep': '#047857',
        
        // Attention Colors
        'warm-amber': '#F59E0B',
        'soft-sunset': '#FCD34D',
        'autumn-glow': '#DC2626',
        
        // AI Intelligence Colors
        'lavender-mist': '#8B5CF6',
        'purple-glow': '#A78BFA',
        'cosmic-purple': '#6D28D9',
        
        // Semantic Colors
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        
        // Emotional State Colors
        emotional: {
          stressed: '#EFF6FF',
          confused: '#F3F4F6',
          hopeful: '#ECFDF5',
          confident: '#FFFFFF',
        },
        
        // AI Confidence Colors
        ai: {
          high: '#10B981',
          medium: '#F59E0B',
          low: '#EF4444',
          thinking: '#8B5CF6',
        },
      },
      
      fontFamily: {
        sans: ['Inter var', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'sans-serif'],
        conversational: ['SF Pro Display', '-apple-system', 'Segoe UI', 'sans-serif'],
        mono: ['SF Mono', 'Fira Code', 'Consolas', 'monospace'],
      },
      
      fontSize: {
        'display': ['48px', { lineHeight: '56px', letterSpacing: '-0.02em' }],
        'h1': ['32px', { lineHeight: '40px', letterSpacing: '-0.01em' }],
        'h2': ['24px', { lineHeight: '32px', letterSpacing: '0' }],
        'h3': ['20px', { lineHeight: '28px', letterSpacing: '0' }],
        'body-large': ['18px', { lineHeight: '28px', letterSpacing: '0' }],
        'body': ['16px', { lineHeight: '24px', letterSpacing: '0' }],
        'caption': ['14px', { lineHeight: '20px', letterSpacing: '0.01em' }],
        'micro': ['12px', { lineHeight: '16px', letterSpacing: '0.02em' }],
      },
      
      spacing: {
        'micro': '4px',
        'xs': '8px',
        'sm': '12px',
        'md': '16px',
        'lg': '24px',
        'xl': '32px',
        '2xl': '48px',
        '3xl': '64px',
        '4xl': '96px',
      },
      
      animation: {
        'ai-thinking': 'aiThinking 2s ease-in-out infinite',
        'gentle-breathing': 'gentleBreathing 4s ease-in-out infinite',
        'subtle-glow': 'subtleGlow 2s ease-in-out infinite',
        'celebration': 'celebration 1s ease-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'fade-in': 'fadeIn 0.5s ease-out',
      },
      
      keyframes: {
        aiThinking: {
          '0%': { backgroundPosition: '0% 50%' },
          '50%': { backgroundPosition: '100% 50%' },
          '100%': { backgroundPosition: '0% 50%' },
        },
        gentleBreathing: {
          '0%, 100%': { transform: 'scale(1)' },
          '50%': { transform: 'scale(1.05)' },
        },
        subtleGlow: {
          '0%, 100%': { opacity: '0.7' },
          '50%': { opacity: '1' },
        },
        celebration: {
          '0%': { transform: 'scale(0) rotate(-180deg)', opacity: '0' },
          '50%': { transform: 'scale(1.2) rotate(0deg)' },
          '100%': { transform: 'scale(1) rotate(0deg)', opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
      },
      
      transitionTimingFunction: {
        'gentle': 'cubic-bezier(0.4, 0, 0.6, 1)',
        'energetic': 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
        'smooth': 'cubic-bezier(0.25, 0.1, 0.25, 1)',
      },
    },
  },
  plugins: [
    require('tailwindcss-animate'),
    require('@tailwindcss/container-queries'),
  ],
} satisfies Config;


export default config;


Step 1.2: Global CSS with Emotional Response System File: client/src/index.css
/* client/src/index.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');


@tailwind base;
@tailwind components;
@tailwind utilities;


@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    
    --primary: 221 83% 53%;
    --primary-foreground: 210 40% 98%;
    
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221 83% 53%;
    
    --radius: 0.5rem;
    
    /* Emotional state variables */
    --emotional-bg-gradient: linear-gradient(180deg, #FFFFFF 0%, #F9FAFB 100%);
    --emotional-animation-speed: 1s;
    --emotional-spacing-multiplier: 1;
  }
  
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    /* ... dark mode colors ... */
  }
  
  /* Emotional state classes */
  .emotional-stressed {
    --emotional-bg-gradient: linear-gradient(180deg, #EFF6FF 0%, #DBEAFE 100%);
    --emotional-animation-speed: 3s;
    --emotional-spacing-multiplier: 1.2;
  }
  
  .emotional-confused {
    --emotional-bg-gradient: linear-gradient(180deg, #F9FAFB 0%, #F3F4F6 100%);
    --emotional-animation-speed: 2s;
    --emotional-spacing-multiplier: 1.5;
  }
  
  .emotional-hopeful {
    --emotional-bg-gradient: linear-gradient(180deg, #ECFDF5 0%, #D1FAE5 100%);
    --emotional-animation-speed: 1.5s;
    --emotional-spacing-multiplier: 1;
  }
  
  .emotional-confident {
    --emotional-bg-gradient: linear-gradient(180deg, #FFFFFF 0%, #FFFFFF 100%);
    --emotional-animation-speed: 1s;
    --emotional-spacing-multiplier: 1;
  }
  
  body {
    @apply bg-background text-foreground;
    font-family: 'Inter var', -apple-system, sans-serif;
    background: var(--emotional-bg-gradient);
    transition: background 0.8s ease;
  }
}


@layer components {
  /* AI thinking animation */
  .ai-thinking-gradient {
    background: linear-gradient(
      90deg,
      theme('colors.lavender-mist'),
      theme('colors.purple-glow'),
      theme('colors.cosmic-purple'),
      theme('colors.purple-glow'),
      theme('colors.lavender-mist')
    );
    background-size: 200% 100%;
    animation: aiThinking var(--emotional-animation-speed) ease infinite;
  }
  
  /* Confidence indicators */
  .confidence-high {
    @apply border-l-4 border-ai-high bg-green-50/50;
  }
  
  .confidence-medium {
    @apply border-l-4 border-ai-medium bg-amber-50/50;
  }
  
  .confidence-low {
    @apply border-l-4 border-ai-low bg-red-50/50;
  }
  
  /* Progress celebrations */
  .celebration-particle {
    @apply absolute w-2 h-2 rounded-full;
    animation: particle-float 3s ease-out forwards;
  }
  
  @keyframes particle-float {
    0% {
      transform: translateY(0) translateX(0) scale(0);
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) translateX(var(--particle-x)) scale(1);
      opacity: 0;
    }
  }
  
  /* Focus states with emotional awareness */
  .focus-calm {
    @apply focus:ring-2 focus:ring-calm-sky focus:ring-offset-2 focus:outline-none;
    transition: all 0.2s ease;
  }
  
  .focus-energetic {
    @apply focus:ring-2 focus:ring-sage-green focus:ring-offset-2 focus:outline-none;
    transition: all 0.15s ease;
  }
}


@layer utilities {
  /* Responsive text that adapts to emotional state */
  .text-responsive {
    font-size: calc(1rem * var(--emotional-spacing-multiplier));
    line-height: calc(1.5 * var(--emotional-spacing-multiplier));
  }
  
  /* Smooth scroll with emotional pacing */
  .scroll-smooth-emotional {
    scroll-behavior: smooth;
    scroll-padding-top: calc(4rem * var(--emotional-spacing-multiplier));
  }
}


Phase 2: AI-First Navigation & Memory System Step 2.1: Conversational Navigation Shell File: client/src/components/layout/AppShell.tsx
// client/src/components/layout/AppShell.tsx
import React, { useState, useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { ConversationalAI } from '../ai/ConversationalAI';
import { CaseMemoryPanel } from '../memory/CaseMemoryPanel';
import { EmotionalStateProvider } from '@/contexts/EmotionalStateContext';
import { CaseContextProvider } from '@/contexts/CaseContextContext';
import { NavigationSidebar } from './NavigationSidebar';
import { JourneyVisualization } from '../journey/JourneyVisualization';
import { Toaster } from '@/components/ui/toaster';
import { cn } from '@/lib/utils';


export function AppShell() {
  const [showMemory, setShowMemory] = useState(false);
  const [emotionalState, setEmotionalState] = useState('confident');
  const location = useLocation();


  // Update emotional state based on AI detection
  useEffect(() => {
    // This would be connected to real AI emotional detection
    const detectEmotionalState = () => {
      // Mock implementation
      const path = location.pathname;
      if (path.includes('hardship')) setEmotionalState('stressed');
      else if (path.includes('documents')) setEmotionalState('confused');
      else if (path.includes('progress')) setEmotionalState('hopeful');
      else setEmotionalState('confident');
    };


    detectEmotionalState();
  }, [location]);


  return (
    <EmotionalStateProvider value={{ state: emotionalState, setState: setEmotionalState }}>
      <CaseContextProvider>
        <div className={cn(
          'flex h-screen bg-background transition-all duration-1000',
          `emotional-${emotionalState}`
        )}>
          {/* Minimal Navigation Sidebar */}
          <NavigationSidebar />
          
          {/* Main Content Area */}
          <main className="flex-1 flex flex-col overflow-hidden">
            {/* Journey Progress Bar */}
            <JourneyVisualization className="h-20 border-b" />
            
            {/* Content Area */}
            <div className="flex-1 flex overflow-hidden">
              <div className="flex-1 overflow-y-auto">
                <div className="p-6 max-w-6xl mx-auto">
                  <Outlet />
                </div>
              </div>
              
              {/* Case Memory Panel (collapsible) */}
              {showMemory && (
                <CaseMemoryPanel 
                  onClose={() => setShowMemory(false)}
                  className="w-96 border-l"
                />
              )}
            </div>
          </main>
          
          {/* Persistent Conversational AI */}
          <ConversationalAI 
            onToggleMemory={() => setShowMemory(!showMemory)}
            emotionalState={emotionalState}
          />
          
          <Toaster />
        </div>
      </CaseContextProvider>
    </EmotionalStateProvider>
  );
}


Step 2.2: Minimal Context-Aware Navigation File: client/src/components/layout/NavigationSidebar.tsx
// client/src/components/layout/NavigationSidebar.tsx
import React from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { Home, FolderOpen, FileText, Brain, HelpCircle, LogOut } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import { useCaseContext } from '@/hooks/useCaseContext';


const navItems = [
  { to: '/app/dashboard', icon: Home, label: 'Home' },
  { to: '/app/cases', icon: FolderOpen, label: 'Cases' },
  { to: '/app/documents', icon: FileText, label: 'Documents' },
  { to: '/app/learning', icon: Brain, label: 'Insights' },
  { to: '/app/help', icon: HelpCircle, label: 'Help' },
];


export function NavigationSidebar() {
  const location = useLocation();
  const { currentCase } = useCaseContext();


  return (
    <TooltipProvider delayDuration={0}>
      <aside className="w-16 bg-deep-ocean text-white flex flex-col">
        {/* Logo */}
        <div className="h-16 flex items-center justify-center border-b border-white/10">
          <img src="/icon.svg" alt="ReAlign" className="w-8 h-8" />
        </div>
        
        {/* Navigation Items */}
        <nav className="flex-1 py-4">
          {navItems.map((item) => {
            const isActive = location.pathname.startsWith(item.to);
            const Icon = item.icon;
            
            return (
              <Tooltip key={item.to}>
                <TooltipTrigger asChild>
                  <NavLink
                    to={item.to}
                    className={cn(
                      'flex items-center justify-center h-12 w-full relative transition-all',
                      'hover:bg-white/10',
                      isActive && 'bg-white/20'
                    )}
                  >
                    <Icon size={20} />
                    {isActive && (
                      <div className="absolute left-0 top-0 h-full w-1 bg-calm-sky" />
                    )}
                  </NavLink>
                </TooltipTrigger>
                <TooltipContent side="right">
                  <p>{item.label}</p>
                  {currentCase && item.to === '/app/cases' && (
                    <p className="text-xs text-muted-foreground">
                      Current: {currentCase.caseNumber}
                    </p>
                  )}
                </TooltipContent>
              </Tooltip>
            );
          })}
        </nav>
        
        {/* Logout */}
        <div className="p-4 border-t border-white/10">
          <button className="flex items-center justify-center h-10 w-full hover:bg-white/10 rounded">
            <LogOut size={20} />
          </button>
        </div>
      </aside>
    </TooltipProvider>
  );
}


Phase 3: Conversational AI Interface Step 3.1: Primary Conversational AI Component File: client/src/components/ai/ConversationalAI.tsx
// client/src/components/ai/ConversationalAI.tsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Sparkles, 
  X, 
  Minimize2, 
  Maximize2, 
  Paperclip, 
  Brain,
  PhoneCall,
  Send
} from 'lucide-react';
import { AIAvatar } from './AIAvatar';
import { MessageBubble } from './MessageBubble';
import { EmotionalIndicator } from './EmotionalIndicator';
import { ConfidenceBar } from './ConfidenceBar';
import { useConversation } from '@/hooks/useConversation';
import { cn } from '@/lib/utils';


interface ConversationalAIProps {
  onToggleMemory: () => void;
  emotionalState: string;
}


export function ConversationalAI({ onToggleMemory, emotionalState }: ConversationalAIProps) {
  const [isOpen, setIsOpen] = useState(true);
  const [isExpanded, setIsExpanded] = useState(false);
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const { 
    messages, 
    sendMessage, 
    isThinking,
    currentContext,
    confidence 
  } = useConversation();


  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);


  const handleSend = async () => {
    if (!input.trim()) return;
    await sendMessage(input);
    setInput('');
  };


  const handleEscalate = () => {
    sendMessage('I need to speak with a human expert', { isEscalation: true });
  };


  if (!isOpen) {
    return (
      <motion.button
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        whileHover={{ scale: 1.05 }}
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 w-16 h-16 bg-deep-ocean text-white rounded-full shadow-2xl flex items-center justify-center group"
      >
        <AIAvatar size="small" state="waiting" />
        <Sparkles className="absolute -top-1 -right-1 w-4 h-4 text-lavender-mist animate-pulse" />
      </motion.button>
    );
  }


  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 20 }}
        className={cn(
          'fixed z-50 shadow-2xl',
          isExpanded 
            ? 'inset-4' 
            : 'bottom-4 right-4 w-[400px] h-[600px]'
        )}
      >
        <Card className="h-full flex flex-col overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-deep-ocean to-ocean-depth text-white p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <AIAvatar size="medium" state={isThinking ? 'thinking' : 'active'} />
                <div>
                  <h3 className="font-semibold">ReAlign AI Assistant</h3>
                  <div className="flex items-center gap-2 text-xs text-white/70">
                    <EmotionalIndicator state={emotionalState} size="small" />
                    <span>•</span>
                    <span>{currentContext}</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center gap-1">
                <Button 
                  size="icon" 
                  variant="ghost" 
                  onClick={onToggleMemory}
                  className="text-white hover:bg-white/20"
                >
                  <Brain size={18} />
                </Button>
                <Button 
                  size="icon" 
                  variant="ghost" 
                  onClick={handleEscalate}
                  className="text-white hover:bg-white/20"
                >
                  <PhoneCall size={18} />
                </Button>
                <Button 
                  size="icon" 
                  variant="ghost" 
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="text-white hover:bg-white/20"
                >
                  {isExpanded ? <Minimize2 size={18} /> : <Maximize2 size={18} />}
                </Button>
                <Button 
                  size="icon" 
                  variant="ghost" 
                  onClick={() => setIsOpen(false)}
                  className="text-white hover:bg-white/20"
                >
                  <X size={18} />
                </Button>
              </div>
            </div>
            
            {/* Confidence Indicator */}
            <div className="mt-2">
              <ConfidenceBar confidence={confidence} showLabel />
            </div>
          </div>
          
          {/* Messages Area */}
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <MessageBubble 
                  key={message.id} 
                  message={message}
                  emotionalState={emotionalState}
                />
              ))}
              
              {isThinking && (
                <div className="flex gap-3">
                  <AIAvatar size="small" state="thinking" />
                  <div className="bg-lavender-mist/20 rounded-lg px-4 py-3">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-lavender-mist rounded-full animate-bounce" />
                      <div className="w-2 h-2 bg-lavender-mist rounded-full animate-bounce delay-100" />
                      <div className="w-2 h-2 bg-lavender-mist rounded-full animate-bounce delay-200" />
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
          
          {/* Input Area */}
          <div className="border-t p-4">
            <form onSubmit={(e) => { e.preventDefault(); handleSend(); }} className="flex gap-2">
              <Button type="button" size="icon" variant="ghost">
                <Paperclip size={20} />
              </Button>
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask me anything about your case..."
                className="flex-1"
                disabled={isThinking}
              />
              <Button type="submit" size="icon" disabled={!input.trim() || isThinking}>
                <Send size={20} />
              </Button>
            </form>
            
            <p className="text-xs text-muted-foreground text-center mt-2">
              AI-powered guidance • Your data is secure • Everything is remembered
            </p>
          </div>
        </Card>
      </motion.div>
    </AnimatePresence>
  );
}


Step 3.2: AI Avatar Component File: client/src/components/ai/AIAvatar.tsx
// client/src/components/ai/AIAvatar.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';


interface AIAvatarProps {
  size?: 'small' | 'medium' | 'large';
  state?: 'waiting' | 'active' | 'thinking' | 'celebrating';
  className?: string;
}


export function AIAvatar({ size = 'medium', state = 'active', className }: AIAvatarProps) {
  const sizeClasses = {
    small: 'w-8 h-8',
    medium: 'w-10 h-10',
    large: 'w-16 h-16',
  };


  const stateAnimations = {
    waiting: { scale: [1, 1.05, 1], transition: { repeat: Infinity, duration: 2 } },
    active: { scale: 1 },
    thinking: { rotate: [0, 360], transition: { repeat: Infinity, duration: 3, ease: 'linear' } },
    celebrating: { scale: [1, 1.2, 1], rotate: [0, 10, -10, 0], transition: { duration: 0.5 } },
  };


  return (
    <motion.div
      className={cn(
        'relative rounded-full bg-gradient-to-br from-lavender-mist to-cosmic-purple flex items-center justify-center',
        sizeClasses[size],
        className
      )}
      animate={stateAnimations[state]}
    >
      <div className="absolute inset-1 rounded-full bg-white/20 backdrop-blur" />
      
      {/* AI Symbol */}
      <svg viewBox="0 0 24 24" className="w-1/2 h-1/2 text-white relative z-10">
        <path
          fill="currentColor"
          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
        />
      </svg>
      
      {/* State Indicators */}
      {state === 'thinking' && (
        <div className="absolute inset-0 rounded-full ai-thinking-gradient opacity-50" />
      )}
      
      {state === 'celebrating' && (
        <>
          {[...Array(6)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-1 h-1 bg-sage-green rounded-full"
              initial={{ scale: 0, x: 0, y: 0 }}
              animate={{
                scale: [0, 1, 0],
                x: Math.cos(i * 60 * Math.PI / 180) * 20,
                y: Math.sin(i * 60 * Math.PI / 180) * 20,
              }}
              transition={{ duration: 0.6, delay: i * 0.1 }}
            />
          ))}
        </>
      )}
      
      {/* Active Indicator */}
      <div className={cn(
        'absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-white',
        state === 'active' && 'bg-sage-green',
        state === 'thinking' && 'bg-warm-amber animate-pulse',
        state === 'waiting' && 'bg-gray-400'
      )} />
    </motion.div>
  );
}


Step 3.3: Message Bubble with Emotional Adaptation File: client/src/components/ai/MessageBubble.tsx
// client/src/components/ai/MessageBubble.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { ThumbsUp, ThumbsDown, Copy, MoreVertical, Paperclip } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { ConfidenceBar } from './ConfidenceBar';
import { ContextCard } from './ContextCard';


interface Message {
  id: string;
  type: 'user' | 'ai' | 'system';
  content: string;
  timestamp: Date;
  confidence?: number;
  context?: any;
  attachments?: Array<{ name: string; type: string }>;
  needsReview?: boolean;
}


interface MessageBubbleProps {
  message: Message;
  emotionalState: string;
}


export function MessageBubble({ message, emotionalState }: MessageBubbleProps) {
  const isAI = message.type === 'ai';
  const isUser = message.type === 'user';
  
  // Adjust animation speed based on emotional state
  const animationDuration = emotionalState === 'stressed' ? 0.5 : 0.3;


  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: animationDuration }}
      className={cn(
        'flex gap-3',
        isUser && 'flex-row-reverse'
      )}
    >
      {/* Message Content */}
      <div className={cn(
        'flex-1 max-w-[80%]',
        isUser && 'flex flex-col items-end'
      )}>
        <div className={cn(
          'rounded-lg px-4 py-3',
          isUser && 'bg-deep-ocean text-white',
          isAI && 'bg-lavender-mist/10 border border-lavender-mist/20',
          message.type === 'system' && 'bg-muted text-center w-full text-sm italic'
        )}>
          {/* AI Confidence Indicator */}
          {isAI && message.confidence && (
            <div className="mb-2">
              <ConfidenceBar confidence={message.confidence} size="small" />
            </div>
          )}
          
          {/* Message Text */}
          <p className={cn(
            'whitespace-pre-wrap',
            emotionalState === 'stressed' && 'text-lg leading-relaxed'
          )}>
            {message.content}
          </p>
          
          {/* Context Cards */}
          {message.context && (
            <div className="mt-3">
              <ContextCard context={message.context} />
            </div>
          )}
          
          {/* Attachments */}
          {message.attachments && message.attachments.length > 0 && (
            <div className="mt-2 space-y-1">
              {message.attachments.map((attachment, idx) => (
                <div key={idx} className="text-xs flex items-center gap-1 text-muted-foreground">
                  <Paperclip size={12} />
                  {attachment.name}
                </div>
              ))}
            </div>
          )}
        </div>
        
        {/* Message Actions */}
        {isAI && (
          <div className="flex items-center gap-1 mt-1 opacity-0 hover:opacity-100 transition-opacity">
            <Button size="icon" variant="ghost" className="h-6 w-6">
              <ThumbsUp size={14} />
            </Button>
            <Button size="icon" variant="ghost" className="h-6 w-6">
              <ThumbsDown size={14} />
            </Button>
            <Button size="icon" variant="ghost" className="h-6 w-6">
              <Copy size={14} />
            </Button>
            <Button size="icon" variant="ghost" className="h-6 w-6">
              <MoreVertical size={14} />
            </Button>
          </div>
        )}
        
        {/* Timestamp */}
        <span className="text-xs text-muted-foreground mt-1">
          {new Date(message.timestamp).toLocaleTimeString()}
        </span>
      </div>
    </motion.div>
  );
}


Step 3.4: Confidence Bar Component File: client/src/components/ai/ConfidenceBar.tsx
// client/src/components/ai/ConfidenceBar.tsx
import React from 'react';
import { cn } from '@/lib/utils';


interface ConfidenceBarProps {
  confidence: number;
  size?: 'small' | 'medium' | 'large';
  showLabel?: boolean;
  className?: string;
}


export function ConfidenceBar({ 
  confidence, 
  size = 'medium', 
  showLabel = false,
  className 
}: ConfidenceBarProps) {
  const sizeClasses = {
    small: 'h-1',
    medium: 'h-2',
    large: 'h-3',
  };


  const getConfidenceColor = () => {
    if (confidence >= 0.8) return 'bg-ai-high';
    if (confidence >= 0.6) return 'bg-ai-medium';
    return 'bg-ai-low';
  };


  const getConfidenceLabel = () => {
    if (confidence >= 0.8) return 'High confidence';
    if (confidence >= 0.6) return 'Medium confidence';
    return 'Low confidence';
  };


  return (
    <div className={cn('space-y-1', className)}>
      {showLabel && (
        <div className="flex items-center justify-between text-xs">
          <span className="text-white/70">{getConfidenceLabel()}</span>
          <span className="font-medium">{Math.round(confidence * 100)}%</span>
        </div>
      )}
      <div className={cn('bg-white/20 rounded-full overflow-hidden', sizeClasses[size])}>
        <motion.div
          initial={{ width: 0 }}
          animate={{ width: `${confidence * 100}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
          className={cn('h-full transition-colors', getConfidenceColor())}
        />
      </div>
    </div>
  );
}


Step 3.5: Emotional Indicator Component File: client/src/components/ai/EmotionalIndicator.tsx
// client/src/components/ai/EmotionalIndicator.tsx
import React from 'react';
import { Heart, Brain, Sun, Cloud } from 'lucide-react';
import { cn } from '@/lib/utils';


interface EmotionalIndicatorProps {
  state: string;
  size?: 'small' | 'medium' | 'large';
  showLabel?: boolean;
  className?: string;
}


export function EmotionalIndicator({ 
  state, 
  size = 'medium', 
  showLabel = false,
  className 
}: EmotionalIndicatorProps) {
  const sizeClasses = {
    small: 'w-4 h-4',
    medium: 'w-5 h-5',
    large: 'w-6 h-6',
  };


  const emotionalStates = {
    stressed: { icon: Cloud, color: 'text-calm-sky', label: 'Feeling stressed' },
    confused: { icon: Brain, color: 'text-warm-amber', label: 'Feeling confused' },
    hopeful: { icon: Sun, color: 'text-sage-green', label: 'Feeling hopeful' },
    confident: { icon: Heart, color: 'text-lavender-mist', label: 'Feeling confident' },
  };


  const currentState = emotionalStates[state] || emotionalStates.confident;
  const Icon = currentState.icon;


  return (
    <div className={cn('flex items-center gap-1', className)}>
      <Icon className={cn(sizeClasses[size], currentState.color)} />
      {showLabel && (
        <span className={cn('text-xs', currentState.color)}>
          {currentState.label}
        </span>
      )}
    </div>
  );
}


Step 3.6: Context Card Component File: client/src/components/ai/ContextCard.tsx
// client/src/components/ai/ContextCard.tsx
import React from 'react';
import { FileText, Calculator, Phone, AlertCircle } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';


interface ContextCardProps {
  context: {
    type: string;
    title: string;
    details?: Record<string, any>;
    relatedDocuments?: string[];
    nextSteps?: string[];
  };
  className?: string;
}


export function ContextCard({ context, className }: ContextCardProps) {
  const getIcon = () => {
    switch (context.type) {
      case 'document': return FileText;
      case 'calculation': return Calculator;
      case 'communication': return Phone;
      default: return AlertCircle;
    }
  };


  const Icon = getIcon();


  return (
    <Card className={cn('p-3 bg-muted/50', className)}>
      <div className="flex items-start gap-2">
        <div className="w-8 h-8 rounded bg-background flex items-center justify-center">
          <Icon size={16} className="text-muted-foreground" />
        </div>
        <div className="flex-1 space-y-2">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-medium">{context.title}</h4>
            <Badge variant="secondary" className="text-xs">
              {context.type}
            </Badge>
          </div>
          
          {context.details && (
            <div className="space-y-1">
              {Object.entries(context.details).map(([key, value]) => (
                <div key={key} className="flex items-center justify-between text-xs">
                  <span className="text-muted-foreground capitalize">
                    {key.replace(/([A-Z])/g, ' $1').trim()}:
                  </span>
                  <span className="font-medium">{value}</span>
                </div>
              ))}
            </div>
          )}
          
          {context.relatedDocuments && context.relatedDocuments.length > 0 && (
            <div className="pt-2 border-t">
              <p className="text-xs text-muted-foreground mb-1">Related documents:</p>
              <div className="flex flex-wrap gap-1">
                {context.relatedDocuments.map((doc, idx) => (
                  <Badge key={idx} variant="outline" className="text-xs">
                    {doc}
                  </Badge>
                ))}
              </div>
            </div>
          )}
          
          {context.nextSteps && context.nextSteps.length > 0 && (
            <div className="pt-2 border-t">
              <p className="text-xs text-muted-foreground mb-1">Suggested next steps:</p>
              <ul className="space-y-1">
                {context.nextSteps.map((step, idx) => (
                  <li key={idx} className="text-xs flex items-start gap-1">
                    <span className="text-muted-foreground">•</span>
                    <span>{step}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
}


Phase 4: Case Memory & Journey Visualization Step 4.1: Case Memory Panel File: client/src/components/memory/CaseMemoryPanel.tsx
// client/src/components/memory/CaseMemoryPanel.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Brain, Clock, FileText, TrendingUp, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ConversationHistory } from './ConversationHistory';
import { DocumentMemory } from './DocumentMemory';
import { DecisionTimeline } from './DecisionTimeline';
import { LearningInsights } from './LearningInsights';
import { cn } from '@/lib/utils';


interface CaseMemoryPanelProps {
  onClose: () => void;
  className?: string;
}


export function CaseMemoryPanel({ onClose, className }: CaseMemoryPanelProps) {
  return (
    <motion.div
      initial={{ x: '100%' }}
      animate={{ x: 0 }}
      exit={{ x: '100%' }}
      transition={{ type: 'spring', damping: 20 }}
      className={cn('bg-background flex flex-col', className)}
    >
      <div className="p-4 border-b flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Brain className="w-5 h-5 text-lavender-mist" />
          <h2 className="font-semibold">Case Memory</h2>
        </div>
        <Button size="icon" variant="ghost" onClick={onClose}>
          <X size={18} />
        </Button>
      </div>
      
      <Tabs defaultValue="conversations" className="flex-1 flex flex-col">
        <TabsList className="mx-4">
          <TabsTrigger value="conversations" className="flex items-center gap-1">
            <Clock size={14} />
            History
          </TabsTrigger>
          <TabsTrigger value="documents" className="flex items-center gap-1">
            <FileText size={14} />
            Documents
          </TabsTrigger>
          <TabsTrigger value="decisions" className="flex items-center gap-1">
            <Brain size={14} />
            Decisions
          </TabsTrigger>
          <TabsTrigger value="insights" className="flex items-center gap-1">
            <TrendingUp size={14} />
            Insights
          </TabsTrigger>
        </TabsList>
        
        <ScrollArea className="flex-1">
          <TabsContent value="conversations" className="p-4">
            <ConversationHistory />
          </TabsContent>
          
          <TabsContent value="documents" className="p-4">
            <DocumentMemory />
          </TabsContent>
          
          <TabsContent value="decisions" className="p-4">
            <DecisionTimeline />
          </TabsContent>
          
          <TabsContent value="insights" className="p-4">
            <LearningInsights />
          </TabsContent>
        </ScrollArea>
      </Tabs>
    </motion.div>
  );
}


Step 4.2: Journey Visualization Component File: client/src/components/journey/JourneyVisualization.tsx
// client/src/components/journey/JourneyVisualization.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { CheckCircle, Circle, AlertCircle, Clock, FileText, Brain, Send, MessageSquare, Sparkles } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import { useCaseContext } from '@/hooks/useCaseContext';


const milestones = [
  { id: 'intake', label: 'Initial Contact', icon: Circle },
  { id: 'documents', label: 'Document Collection', icon: FileText },
  { id: 'analysis', label: 'Financial Analysis', icon: Brain },
  { id: 'submission', label: 'Application Submitted', icon: Send },
  { id: 'negotiation', label: 'Negotiation', icon: MessageSquare },
  { id: 'resolution', label: 'Resolution', icon: CheckCircle },
];


interface JourneyVisualizationProps {
  className?: string;
}


export function JourneyVisualization({ className }: JourneyVisualizationProps) {
  const { currentCase, progress } = useCaseContext();
  
  if (!currentCase) return null;


  const currentMilestoneIndex = milestones.findIndex(m => m.id === currentCase.status);
  const overallProgress = ((currentMilestoneIndex + 1) / milestones.length) * 100;


  return (
    <div className={cn('bg-background border-b', className)}>
      <div className="p-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-3">
          <div>
            <h3 className="font-semibold">Your Loss Mitigation Journey</h3>
            <p className="text-sm text-muted-foreground">
              Case #{currentCase.caseNumber} • Started {new Date(currentCase.createdAt).toLocaleDateString()}
            </p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-sage-green">{Math.round(overallProgress)}%</div>
            <p className="text-xs text-muted-foreground">Complete</p>
          </div>
        </div>
        
        {/* Progress Bar */}
        <Progress value={overallProgress} className="h-2 mb-4" />
        
        {/* Milestones */}
        <div className="flex items-center justify-between">
          {milestones.map((milestone, index) => {
            const isCompleted = index < currentMilestoneIndex;
            const isCurrent = index === currentMilestoneIndex;
            const Icon = milestone.icon;
            
            return (
              <div key={milestone.id} className="flex flex-col items-center flex-1">
                {/* Connector Line */}
                {index > 0 && (
                  <div className={cn(
                    'absolute h-0.5 -mt-4',
                    isCompleted ? 'bg-sage-green' : 'bg-muted',
                    `w-[${100 / (milestones.length - 1)}%]`
                  )} />
                )}
                
                {/* Milestone Icon */}
                <motion.div
                  initial={false}
                  animate={{
                    scale: isCurrent ? 1.2 : 1,
                    y: isCurrent ? -2 : 0,
                  }}
                  className={cn(
                    'w-8 h-8 rounded-full flex items-center justify-center relative',
                    isCompleted && 'bg-sage-green text-white',
                    isCurrent && 'bg-calm-sky text-white shadow-lg',
                    !isCompleted && !isCurrent && 'bg-muted text-muted-foreground'
                  )}
                >
                  {isCompleted ? (
                    <CheckCircle size={16} />
                  ) : (
                    <Icon size={16} />
                  )}
                  
                  {isCurrent && (
                    <div className="absolute inset-0 rounded-full bg-calm-sky animate-ping opacity-25" />
                  )}
                </motion.div>
                
                {/* Milestone Label */}
                <span className={cn(
                  'text-xs mt-1 text-center',
                  isCurrent && 'font-semibold'
                )}>
                  {milestone.label}
                </span>
                
                {/* Time Estimate for Current */}
                {isCurrent && progress.estimatedCompletion && (
                  <span className="text-xs text-muted-foreground flex items-center gap-1 mt-1">
                    <Clock size={10} />
                    {progress.estimatedCompletion}
                  </span>
                )}
              </div>
            );
          })}
        </div>
        
        {/* AI Prediction */}
        {currentCase.aiPrediction && (
          <div className="mt-4 p-3 bg-lavender-mist/10 rounded-lg flex items-start gap-2">
            <Sparkles className="w-4 h-4 text-lavender-mist mt-0.5" />
            <div className="flex-1">
              <p className="text-sm">{currentCase.aiPrediction}</p>
              <p className="text-xs text-muted-foreground mt-1">
                Based on analysis of 1,247 similar cases
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}